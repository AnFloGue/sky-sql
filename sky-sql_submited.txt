Day 3 - Python Data Layer
It‚Äôs only your third day at the FAA headquarters, but the work just keeps coming! üòÖ
You started your day with another message from Aaron:
Hey, thanks for all your work with the SOL
Queries! You really helped us save time! 2
We want to stop using direct SQL queries and
start using our own dedicated tool. I understand
that you are fluent in Python, can you create
this kind of tool for us?
Aaron has requested your assistance in developing a tool that will automatically generate data reports according to user input. will need to create a Python program that can query the database using code.
‚ùá Note: A flight is considered delayed if it is delayed by 20 minutes or more.
User interface
To help you focus on the Data Layer, we‚Äôve provided a ready-made user interface at main.py.
The program includes a menu interface that triggers inner functions that, in turn, call the functions of the data layer. Additionally, it features a display function that shows any results flight list.
You don‚Äôt need to edit this file at all, just make everything here work by editing the data layer.
Create a Data Access Layer (DAL)
Your main objective for this mission is to create a Data Access Layer, which serves as a layer of abstraction for interacting with a database. To achieve this, we will use a class which enables multiple methods to share the same DB connection.
We‚Äôve created a template for a basic Data Access Object in the file data.py.
Please follow these steps:
Complete the missing function _execute_query according to the docstring instructions. You can see that the function get_flight_by_id executes this function.
Try the first menu item, "Show flight by ID".
Did you get the right output? Great, your data object works!
Add new query methods
Add new methods to data.py that will make the interface fully functional!

(
    ID                  INTEGER
        primary key autoincrement,
    YEAR                TEXT,
    MONTH               TEXT,
    DAY                 NUMERIC,
    DAY_OF_WEEK         TEXT,
    AIRLINE             INTEGER,
    FLIGHT_NUMBER       INTEGER,
    TAIL_NUMBER         INTEGER,
    ORIGIN_AIRPORT      TEXT,
    DESTINATION_AIRPORT TEXT,
    SCHEDULED_DEPARTURE TEXT,
    DEPARTURE_TIME      TEXT,
    DEPARTURE_DELAY     INTEGER,
    TAXI_OUT            TEXT,
    WHEELS_OFF          TEXT,
    SCHEDULED_TIME      TEXT,
    ELAPSED_TIME        TEXT,
    AIR_TIME            INTEGER,
    DISTANCE            INTEGER,
    WHEELS_ON           INTEGER,
    TAXI_IN             INTEGER,
    SCHEDULED_ARRIVAL   TEXT,
    ARRIVAL_TIME        INTEGER,
    ARRIVAL_DELAY       INTEGER,
    DIVERTED            TEXT,
    CANCELLED           INTEGER,
    CANCELLATION_REASON INTEGER,
    AIR_SYSTEM_DELAY    INTEGER,
    SECURITY_DELAY      INTEGER,
    AIRLINE_DELAY       INTEGER,
    LATE_AIRCRAFT_DELAY INTEGER,
    WEATHER_DELAY       INTEGER
);-- auto-generated definition
create table airlines
(
    ID      INTEGER
        primary key,
    AIRLINE TEXT
);

-- auto-generated definition
create table airports
(
    IATA_CODE TEXT
        primary key,
    AIRPORT   TEXT,
    CITY      TEXT,
    STATE     TEXT,
    COUNTRY   TEXT,
    LATITUDE  TEXT,
    LONGITUDE TEXT
);